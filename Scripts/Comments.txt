Method : IsEmpty
Description :  Check collection length
 This returns :True if collection is empty


Method : GetRandom
Description : Get n random elements of collection
 <param name="count"></param>
 This returns :


Method : GetEqualsCount
Description : Find equals your`s gameObjcts 
 This returns : Count of Equal objects


Method : GetEqualsOrFirst
Description : Find equals your`s gameObjcts 
 This returns : Object of collection equal yours if collection contains this, else returns the first object


Method : AllDo
Description : All objects in collection invokes action 


Method : AllDoWithout
Description : All objects in collection except one invokes action


Method : AllDoWithout
Description : All objects in collection except list invokes action


Method : SingleDo
Description : One object by index, invokes action


Method : SingleDo
Description : One object by link, invokes action


Method : Replace
Description :  Replace old value to new value
 <param name="oldValue">The value you want to replace</param>
 <param name="newValue">The value you want to change to</param>
 This returns :Replaced array


Method : Swap
Description :  Swaps the values 
 <param name="firstValue">Swap value</param>
 <param name="secondValue">Swap value</param>
 This returns :Swapped array


Method : Contains
Description : Checks if a value is stored there
 This returns :True if contains


Method : Contains
Description : Checks if a value is stored there and retun the index of it
 This returns :True if contains


Method : Equals
Description :  If self has all values of container returns true
 <param name="container">Given container to compare</param>


Method : Select
Description :  finds first object matching the condition 
 This returns :First matching object


Method : Reverse
Description :  Reverse array 
 This returns :Reversed array


Method : SelectAll
Description :  finds all objects matching the condition 
 This returns :array of matching objects


Method : SetDisposableListeners
Description :  
 Sets Actionswhich work once in a while
 
 <param name="actions"></param>


Method : SetDisposableListener
Description :  
 Sets Action which works once in a while
 
 <param name="action"></param>


Method : OffInterectableOnClick
Description :  
 If true on click removes interectable, else do nothing
 
 <param name="value"></param>


Method : OffOnClick
Description :  
 If true on click setActive false, else do nothing
 
 <param name="value"></param>


Method : Rigidbody
Description :  Get the rigidbody in given game object if hasn`t returns the added component of rigidbody
 This returns :rigidbody component


Method : Rigidbody2D
Description :  Get the rigidbody2D in given game object if hasn`t returns the added component of rigidbody
 This returns :rigidbody component


Method : ChangeColor2D
Description :  Change sprite rendere color 
 <param name="color">Given color to change</param>


Method : ChangeColor2D
Description :  Change sprite rendere color 
 <param name="color">Given color to change</param>


Method : ChangeColor3D
Description :  Change color of material in current object 
 <param name="color"></param>


Method : ChangeColor3D
Description :  
 Changing Color of material in current object <br></br>
 <b>[Note]</b>Alpha channel valuse must be between 0,1
 
 <param name="a">Muse be value between 0, 1</param>


Method : ReverseActive
Description : Reverse the active self


Method : Swap
Description :  Swaps objects positions 


Method : Swap
Description :  Swaps objects positions 


Method : SetPosition
Description :  Set transform position 
 <param name="pos">Position to set</param>


Method : SetPosition
Description :  Set transform position 
 <param name="pos">Transform to set position from</param>


Method : SetPosition
Description :  Set transform position
 <param name="pos">GameObject to set position from</param>


Method : SetName
Description :  Set name of gameObject 


Method : SetRotation
Description :  Set gameobject transform rotation 


Method : GetEqualsCount
Description : Find equals your`s gameObjcts 
 This returns : Count of Equal objects


Method : GetEqualOrFirst
Description : Find equals your`s gameObjcts 
 This returns : Object of collection equal yours if collection contains this, else returns the first object


Method : AllDo
Description : 
 All objects in collection invokes action 
 <br/><br/>Note :<br/>Does not change the reference value of structures such as : int, float<br/>
 But change values in class such as Wallet.Add(14) and so on
 


Method : AllDoWithout
Description : All objects in collection except one invokes action


Method : AllDoWithout
Description : All objects in collection except list invokes action


Method : SingleDo
Description : One object by index, invokes action


Method : SingleDo
Description : One object by link, invokes action


Method : Replace
Description :  Replaces old value to new 
 <param name="oldValue">Value to replace</param>
 <param name="newValue">Value replace to</param>


Method : ReplaceAll
Description :  Replace all values in collection to new 


Method : ReplaceRange
Description :  Replaces range of collection to new Value 


Method : ReplaceRangeFromEnd
Description : 
 <param name="startIndex">Index of item when starts replasing</param>
 <param name="newValue">Value replace to</param>


Method : Swap
Description :  Swaps first and second values 


Method : Off
Description : Turn`s off all GameObjects in colliction 


Method : On
Description : Turn`s on all GameObjects in colliction 


Method : Off
Description : Turn`s off all GameObjects in colliction 


Method : On
Description : Turn`s on all GameObjects in colliction 


Method : MoveByCircle
Description :  Use function to moves object by circle
 <param name="center">Center of moving</param>
 <param name="radius">Moving radius</param>
 This returns :Point in enviroment by time


Method : BezieMove
Description : Use this function to move object by curve of given points
 <param name="points">Traectory of moving</param>
 <param name="time">Time, value between 0,1</param>
 This returns :Retruns the point of way by time
 <exception cref="ArgumentException">points count must be more then 2</exception>


Method : FirstDerivative
Description :  Use this function to turn in direction 
 <param name="way">Way of moving </param>
 <param name="time">Time, value between 0,1</param>
 This returns :Direction of move by time


Method : MoveByPolygon
Description :  Used to move an object in a straight line through all points in the collection 


Method : WaitAndDo
Description :  Starts local coroutine, wait given time and invoke action 
 <param name="delay">Delay</param>


Method : WaitAndDo
Description :  Starts local coroutine, wait given time and invoke action 
 <param name="delay">Delay</param>


Method : Instance
Description :  Instanse object with given params


Method : Print
Description : Log the object value to unity console


Method : PrintError
Description : Log error the object value to unity console


Method : PrintAll
Description : Log the all objects to unity console
 <param name="withIndex">If true log the index of every objet</param>


Method : PrintErrorAll
Description : Log error the all objects to unity console


Method : Print
Description : Log object from collection by index to unity console


Method : PrintName
Description : Log`s the object name, message prints after the name


Method : Jump
Description :  
 Make simulation of jump with given force
 
 <param name="force"> The force of rigidbody with you want to jump</param>


Method : MoveTo
Description :  
 Moves Rigidbody to given direction with given speed
 
 <param name="direction"> Direction of moving, use Input.GetAxis or similar metods</param>
 <param name="speed">Movement speed</param>


Method : MoveTo
Description :  
 Moves Rigidbody to given position with given speed
 
 <param name="pos"> Direction of moving, use Input.GetAxis or similar metods</param>
 <param name="speed">Movement speed</param>


Method : MoveX
Description :  
 Moves Rigidbody by x direction
 
 <param name="direction"> Direction of moving, use Input.GetAxis or similar metods</param>
 <param name="speed">Movement speed</param>


Method : MoveZ
Description :  
 Moves Rigidbody by z direction
 
 <param name="direction"> Direction of moving, use Input.GetAxis or similar metods</param>
 <param name="speed">Movement speed</param>


Method : MoveY
Description :  Moves Rigidbody by Y direction (not jump)
 <param name="direction"></param>
 <param name="speed"></param>


Method : UnFreezeRotationX
Description : UnFreeze Rotation by x of rigidbody >


Method : UnFreezeRotationY
Description : UnFreeze Rotation by Y of rigidbody >


Method : UnFreezeRotationZ
Description : UnFreeze Rotation by Z of rigidbody >


Method : FreezeRotationY
Description :  Freeze Rotation by y of rigidbody >


Method : FreezeRotationX
Description :  Freeze Rotation by x of rigidbody >


Method : FreezeRotationZ
Description :  Freeze Rotation by Z of rigidbody >


Method : TransferControl3D
Description : Call this method in update and give the Input.GetAxis for moving 3D character 
 <param name="moveDirection">Set there player input</param>
 <param name="moveSpeed">Movement speed</param>
 <param name="YMouseAxis">Mouse Axis Y</param>
 <param name="XMouseAxis">Mouse Axis X</param>
 <param name="sensivity">Rotation speed</param>


Method : TransferControl3D
Description : Call this method in update and give the Input.GetAxis for moving 3D character 
 <param name="moveDirection">Set there player input</param>
 <param name="moveSpeed">Movement speed</param>
 <param name="rotation">Use mouse input to rotate the rigidbody</param>


Method : TransferControl3D
Description :  
 Uses the old input system!
 Controls the 3d movement of your character
 
 <param name="speed">Speed of movement</param>
 <param name="sensivity">Rotation speed</param>


Method : Jump
Description :  
 Make simulation of jump with given force
 
 <param name="force">Movement speed</param>


Method : MoveTo
Description :  
 Moves Rigidbody to given direction with given speed
 
 <param name="direction"> Direction of moving, use Input.GetAxis or similar metods</param>
 <param name="speed">Movement speed</param>


Method : MoveTo
Description :  
 Moves Rigidbody to given position with given speed
 
 <param name="pos"> Position of moving to</param>
 <param name="speed">Movement speed</param>


Method : MoveX
Description :  
 Moves Rigidbody by x direction with given speed
 
 <param name="direction"> Direction of moving, use Input.GetAxis or similar metods</param>
 <param name="speed">Movement speed</param>


Method : MoveY
Description : 
Not a jump.
Moves Rb up/down with a given speed



Method : FreezeRotationChangeState
Description :  
 Change parametr 'Freeze rotation z' of Rigidbody2D on oposite
 


Method : FreezeRotation
Description :  Freeze or unfreeze rigidbody`s rotation 
 <param name="value">If true freezeing rotation</param>


Method : TransferControl2D
Description :  Moves rigidbody with inputs, uses old input system 
 <param name="speed">Movement speed</param>
 <param name="force">Jump force</param>
 <param name="jumpKey">key that triggers a jump when pressed.</param>


Method : Add
Description : Add children gameObject to transform 


Method : Add
Description : Add list of object to children of transform 


Method : Clear
Description : Destroy all child gameObjects


Method : MoveByCurve
Description :  Moves transform by bezier points
 <param name="way">Points to move there</param>
 <param name="time">value between 0 and 1 to move from fist to last points in way</param>


Method : MoveByPolygon
Description :  Moves transform by polygons 
 <param name="way">Points to move there</param>
 <param name="time">value between 0 and 1 to move from fist to last points in way</param>


Method : MoveByCircle
Description :  Moves transform by 2d Circle 
 <param name="radius"></param>
 <param name="time"></param>


Method : MoveByCircle
Description :  Moves transform by 2d Circle 
 <param name="radius"></param>
 <param name="time"></param>


Method : SetX
Description : Set X of vector 


Method : SetY
Description : Set Y of vector 


Method : SetZ
Description : Set Y of vector 


